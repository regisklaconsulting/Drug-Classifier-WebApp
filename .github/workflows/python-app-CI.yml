# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Drug-Classifier Web App CI Pipeline

on:
  # EVENT 2 
  push:
    branches: [ "main" ]
  # EVENT 2b 
  pull_request:
    branches: [ "main" ]
  # ? 
  workflow_dispatch:

# permissions:
#  contents: read
permissions: write-all

jobs:

  # This is the build or CI part

  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.13.3"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.13.3
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
    - name: Display Python version
      run: python -c "import sys; print(sys.version)"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Format
      run: make format
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest || true
    - name: Package and publish pytest test results
      uses: actions/upload-artifact@v4
      with:
        name: pytest-results-${{ matrix.python-version }}
        path: junit/test-results-${{ matrix.python-version }}.xml
      # Use always() to always run this step to publish test results when there are test failures
      if: ${{ always() }}
    - name: Update Branch
      env:
        NAME: ${{ secrets.USER_NAME }}
        EMAIL: ${{ secrets.USER_EMAIL }}
        TARGET_BRANCH: to-be-deployed
        SOURCE_BRANCH: main
      run: make update-branch USER_NAME=$NAME USER_EMAIL=$EMAIL SOURCE_BRANCH=$SOURCE_BRANCH TARGET_BRANCH=$TARGET_BRANCH
