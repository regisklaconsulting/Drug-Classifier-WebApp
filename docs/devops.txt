=========
DevOps
=========

===============
Operations
===============

Run the app: 

$ export MODEL_FILE_PATH=/tmp/model/drug-classifier-pipeline.skops && python app/drug_app.py 
...
[...] - [INFO] - >> Loading the model located at [/tmp/model/drug-classifier-pipeline.skops]
[...] - [DEBUG] -  Loaded training pipeline: Pipeline(steps=[('preprocessing',
...
[...] - [INFO] - Done!
...
* Running on local URL:  http://127.0.0.1:7860
...

See [drug-classifier-gradio-gui.png] for an example of the web app. 

===============
CI/CD
===============

Step 0: Prerequisites
===================== 

>>> Locally

- Make sure the requirements.txt is up-to-date: 
    $ uv pip freeze >requirements.txt

- Be sure about the alignment of: app/README.md file [see SIMPLE-CI-CD-FOR-ML] project. 
    ...
    app_file: drug_app.py
    ...

>>> Hugging Face

Hugging Face Token: Profile > Settings > Access Tokens  
    + Create New Token 
        type = Write 
        name = GITHUB_ACTIONS_WRT_TOKEN

>>> On Github

Create the following secrets: Settings tab > Secrets and variables > Actions > New Repositories Secret 
    - USER_NAME = regisklaconsulting
    - USER_EMAIL = regisklaconsulting@gmail.com 

    Note: they are used in the Makefile script we'll create later. 

Create a branch "to-be-deployed" 
    - We create this branch in order for it to always contain the last built version to be deployed 
    - Github Actions workflow: 
        (a) build the project 
        (b) if build ok then 
                commit all generated files (e.g. test reports, metrics, etc)
                push on "to-be-deployed" 
            fi 

Step 1: CI 
==========

Expected outcome: 
    - Application is compile and/or built 
    - Unit and integration tests are successfully run 
    - 

Step 1: Create a Makefile script (see file) 
    - permissions to write 
    - 

Step 2: Start with a Python workflow (wf) template: [Repo > Actions]
    - In "Suggested for this repository" 
    - Select "Python Application" 
    - Click "Configure" and adapt the script with your settings: 
        - triggers 
        - Python version
        - ... 
    => the file .github/worflows/python-app.yml is created 
    - Pull to update: 
        $ git pull 

Note: 
- Push and fix the issues in the Actions tab until the build (in Actions tab) becomes green.

Step 2: Continuous Deployment (CD) 
==================================

We'll use the same Github Actions config file to write the CD process. 
The deployment is made on Hugging Face Spaces [See Simple-CI-CD-For-ML/docs/hf-faces.txt].

The deployment process roughly consists to:

    1. pull the app from the "to-be-deployed" branch 
        => Makefile: hf-pull-login
    2. singning in HF CLI using a token
        => Makefile: hf-pull-login
    3. push the app files to finally deploy the app 
            => Makefile: hf-push

See the file [.github/workflows/python-app-CD.yml] and [Makefile] for the CD wf: 

In Makefile: 

    hf-pull-login: 
        - N/A 
    hf-push: 
        
        Note: The HF CLI is used to "push" the files in the right directories
            - REPO_ID = regisklaconsulting/Drug-Classifier-Web-App
            - LOCAL_PATH = ./app 

Triggering events: 
    - each time the CI workflow completes.  




References
==========

HF CLI:
    - https://huggingface.co/docs/huggingface_hub/guides/cli

Github Actions For python: 
    - https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-python
    - https://endjin.com/blog/2023/02/how-to-implement-continuous-deployment-of-python-packages-with-github-actions 

